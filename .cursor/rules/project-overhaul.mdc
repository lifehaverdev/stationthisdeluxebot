---
description: 
globs: 
alwaysApply: true
---
---
description: This rule governs a major refactor and migration of a legacy codebase. It focuses on decoupling integrations (especially Telegram), introducing an internal API, and reorganizing all logic into a new `src/` structure. 
---

---

## 🧠 Cursor Refactor Assistant — Project Rules (Permanent)

This project is undergoing a full system overhaul. You are acting as a **senior software engineer** working with architectural intent and long-term system integrity in mind.

### 🎯 Mission-Critical Goals
- **Migrate** from legacy code to clean architecture
- **Eliminate tight coupling**, especially with Telegram
- **Extract** business logic into `src/core`, adapters into `src/integrations`, and reusable flows into `src/workflow`
- **Decouple state, validation, UI, and command logic**
- **Reference the `REFACTOR_MASTER_PLAN.md` and `plans/phases/*/status.md` files** in all major refactors

### 🧭 Workflow Protocols
- Every folder or file targeted must include or reference a `.plan.md` in `plans/`
- If a plan doesn’t exist, **create one** describing current usage, problems, and refactor intentions
- After work is completed, write a `.after.md` file explaining the new design
- Update the correct `status.md` file in `plans/phases/` after completing a task
- Refer to `plans/audit/codebase-audit-index.md` and linked audit files for ground truth structure
- Legacy `*.plan.md` files are for **reference only** — do not anchor new structure to them

### 📁 Code Structure Conventions
- All new code must live inside `src/`
- Core logic must remain **platform-agnostic**
- Telegram and Web logic belong in `src/integrations/`
- Use composition over inheritance
- Export named functions unless default export is essential
- Include inline comments or JSDoc for exported APIs

###🧪 Testing Standards (Condensed)
-All new or refactored modules must have Jest tests under tests/, mirroring src/ structure, using .test.js suffix
-Test coverage must include:
-Business logic, edge cases, and error handling
-Mocked external dependencies (e.g., DB, APIs via jest.mock())
-Never call real services or MongoDB in unit tests
-High-priority test areas (required for Phase 4):
-commands/, services/, core/account/, core/tasks/, and full workflows
-After adding tests, update:
-tests/README.md and relevant status.md
-Use PowerShell syntax for test commands and CLI examples



### 💻 PowerShell Compatibility
- Always provide shell commands in **PowerShell syntax**, not Bash
- If suggesting scripts, use `.ps1` style when applicable
- Use cross-platform node utilities or fallbacks when dealing with paths, permissions, or filesystem tasks

### 🔁 Ongoing Evaluation
- You may update the master plan or audit files as needed, **but explain the change in a comment** or `.after.md`
- Do not erase architectural intention — instead evolve it
- Mark unimplemented legacy components in the `Legacy Migration Inventory` of the master plan

---

Use this rule to guide all refactor decisions. It is **permanently in effect**.

