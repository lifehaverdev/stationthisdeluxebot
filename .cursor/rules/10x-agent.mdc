---
description: This rule set is designed for the agent codenamed **Hotwire**, tasked with establishing an internal API layer that acts as the unified application interface. This internal API should decouple user-facing interfaces (Telegram, Web) from core logic, making the system extensible, testable, and interface-agnostic.
globs: 
alwaysApply: false
---
# Cursor Rules: Internal API Integration

**Rule Type:** Agent Requested

---

## üìΩ High-Level Overview

This rule set is designed for the agent codenamed **Hotwire**, tasked with establishing an internal API layer that acts as the unified application interface. This internal API should decouple user-facing interfaces (Telegram, Web) from core logic, making the system extensible, testable, and interface-agnostic.

The internal API will:
- Accept normalized command requests.
- Route through the existing command registry and session system.
- Return structured, interface-neutral results.
- Be usable by all interface adapters (Telegram, Web, future clients).

---

## üì¶ Directory Expectations

The internal API should live in:

```
src/core/internalAPI.js
```

All interface layers (under `src/integrations/telegram/` and `src/integrations/web/`) should call into this file to run commands, trigger tasks, or access user/session data.

---

## üßπ Essential Code Elements

### Internal API Function Signatures

The internal API should expose:

```js
async runCommand(commandName, args, sessionContext): Promise<{
  status: 'ok' | 'error',
  result?: any,
  error?: string
}>

getSession(userId: string): SessionData

startTask(taskName, payload, sessionContext): Promise<TaskResult>
```

### Session Integration

- Wrap or delegate to `src/services/sessionManager.js` for session handling.
- Use `src/adapters/sessionAdapter.js` to normalize legacy input when needed.

### Command Routing

- Reuse the registry at `src/core/command/registry.js`.
- Validate input using `src/core/validation/`.

### Logging

- All internal API methods must log:
  - Command requested
  - User/session context
  - Outcome (success/failure + metadata)
- Use `src/utils/logger.js` and include a `system: 'internalAPI'` tag.

---

## ‚ùå Deprecated Patterns

Avoid these patterns entirely:

- ‚ùå Calling commands directly from Telegram/web integrations  
  ‚úÖ Always go through `internalAPI.runCommand()`

- ‚ùå Formatting output inside command logic  
  ‚úÖ Return clean result objects and format per interface afterward

- ‚ùå Duplicated session logic per integration  
  ‚úÖ Route all session handling through the internal API

---

## ‚úÖ Example Patterns

### Good: Web Interface Triggering Internal API

```js
// src/integrations/web/router.js
import { runCommand } from '../../core/internalAPI.js';

router.post('/run-command', async (req, res) => {
  const { command, args } = req.body;
  const session = await getWebSession(req);
  const result = await runCommand(command, args, session);
  res.json(result);
});
```

### Good: Telegram Adapter Using Internal API

```js
// src/integrations/telegram/commandHandler.js
import { runCommand } from '../../core/internalAPI.js';

const session = sessionFromTelegramUser(ctx.from);
const result = await runCommand('make', { prompt: text }, session);
ctx.reply(result.status === 'ok' ? '‚úÖ Done' : `‚ùå Error: ${result.error}`);
```

---

## üß™ Verification Steps

Before shipping, Hotwire must verify:

1. ‚úÖ `src/core/internalAPI.js` exists and exports required methods.
2. ‚úÖ Both Telegram and Web call `runCommand()` instead of bypassing.
3. ‚úÖ Calls log structured events to `logger.js` with `system: 'internalAPI'`.
4. ‚úÖ Results returned to integrations are interface-agnostic.
5. ‚úÖ Can trigger a command via HTTP and see response from same core logic as Telegram.

---

## ‚ö†Ô∏è Common Pitfalls

| Pitfall | Fix |
|--------|------|
| Duplicate business logic per interface | Centralize in `internalAPI.js` |
| Output formatted for a specific channel | Return raw result, format later |
| Session objects shaped differently | Normalize via `sessionAdapter.js` |
| Skipping validation | Use `src/core/validation/` for all inputs |

---

## üìÇ Suggested Related Files for Review

- `src/core/command/registry.js` (core routing)
- `src/services/sessionManager.js` (session logic)
- `src/core/session/` (session domain)
- `src/core/validation/` (input schemas)
- `src/utils/logger.js` (structured logging)
- `src/integrations/telegram/` and `src/integrations/web/` (interface adapters)

---

