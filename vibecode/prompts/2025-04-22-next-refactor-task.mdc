---
description: 
globs: 
alwaysApply: true
---
 # Account Command Migration and Testing

## 🎯 Task Goal
Migrate the account management commands from the legacy implementation to the new clean architecture and create comprehensive tests for these commands.

## 📋 Context
The account commands are high-priority targets in Phase 3 of our refactoring process. While significant progress has been made with the `/make` and media commands, the account management functionality still relies on the legacy architecture and has insufficient test coverage. This task is critical for Phase 4 readiness, as these commands handle user identity, points economy, settings, and preferences.

## 🗂️ Related Files
- Current implementation: `iAccount.js` (legacy)
- Target implementation: `src/commands/accountCommands.js` (partially migrated)
- Reference implementations: 
  - `src/commands/makeCommand.js` (fully migrated)
  - `src/commands/mediaCommand.js` (fully migrated)
  - `src/commands/statusCommand.js` (fully migrated)
- Test reference: `tests/commands/makeCommand.e2e.test.js`
- Core modules:
  - `src/core/account/`
  - `src/core/points/`
  - `src/core/workflow/`
  - `src/core/user/`

## 📊 Required Coverage
- Account creation, linking, and verification
- Points management (balance checking, regeneration, spending)
- User settings and preferences
- Account status and statistics
- Platform linking (Telegram, Web)

## 🧱 Implementation Steps

1. **Audit Current Implementation**
   - Review the legacy `iAccount.js` to identify all commands and functionality
   - Document the current user flows and state transitions
   - Identify integration points with other systems (points, sessions, etc.)

2. **Core Domain Implementation**
   - Complete or enhance core domain modules in `src/core/account/` and `src/core/user/`
   - Implement domain services for account operations
   - Create validation schemas for account-related inputs

3. **Workflow Definition**
   - Create workflow implementations for multi-step account interactions
   - Define workflow steps for complex operations like account linking
   - Implement proper validation and error handling

4. **Command Implementation**
   - Complete the implementation in `src/commands/accountCommands.js`
   - Create command handlers for each account operation
   - Implement feature flags for gradual rollout

5. **Test Suite Creation**
   - Create unit tests for domain services
   - Implement integration tests for workflows
   - Create end-to-end tests for command execution
   - Test points management and other critical operations

## 🧪 Testing Requirements
- Create `tests/commands/accountCommands.test.js` for basic command tests
- Create `tests/commands/accountCommands.e2e.test.js` for end-to-end tests
- Test each account command with various input scenarios
- Verify proper points management and state transitions
- Test error handling and edge cases
- Achieve at least 80% code coverage

## 📐 Architecture Guidelines
- Follow clean architecture principles with proper separation of concerns
- Keep business logic in domain services, not in command handlers
- Use the workflow system for multi-step interactions
- Implement proper validation for all inputs
- Follow the established patterns from successful migrations

## 📝 Deliverables
1. Completed implementation in `src/commands/accountCommands.js`
2. Workflow implementations for complex account operations
3. Comprehensive test suite with unit, integration, and E2E tests
4. Documentation of command usage and behavior
5. Updated feature flags configuration
6. Updated Phase 3 status report

## 🎭 Success Criteria
- All account commands function correctly under the new architecture
- Comprehensive test coverage for all account operations
- Clean separation of concerns with proper layering
- Feature flags allow gradual rollout
- Documentation is complete and accurate
- The implementation follows established patterns

## 🛠️ Tools and Resources
- Use the `CommandRegistry` and `CommandRouter` from `src/core/command/`
- Leverage the workflow system in `src/core/workflow/`
- Use the validation framework in `src/core/validation/`
- Reference the test patterns in `tests/commands/makeCommand.e2e.test.js`
- Utilize the points system in `src/core/points/`
- Use the UI component system in `src/core/ui/`

## ⚠️ Potential Challenges
- Complex state management for account operations
- Integration with points economy system
- Handling multi-platform account linking
- Testing complex workflows with many edge cases
- Maintaining backward compatibility during migration

## 🔄 Next Steps After Completion
Upon successful completion of this task, the next priority will be:
1. Service layer test coverage
2. UI component integration tests
3. Test organization standardization