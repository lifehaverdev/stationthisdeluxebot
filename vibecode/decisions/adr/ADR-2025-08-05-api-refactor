# ADR-2025-08-05: Folder-Based API Re-organisation (v1)

## Context
Both `src/api/internal` and `src/api/external` contain ±12 large files (300-500 LOC each) with mixed naming.  
Pain points:
* Hard to see domain boundaries.
* No local README / schema docs per domain.
* Giant index files wire everything, complicating dependency injection.
* Sparse colocated tests; current supertest suites live elsewhere.

## Decision
1. Introduce domain folders under both `internal/` and `external/`:

   ```
   src/api/internal/
     auth/          users/         wallets/
     economy/       generations/   loras/
     spells/        storage/       teams/
     system/
   ```
   (external mirrors the same set)

2. Each folder contains:
   * `index.js` – exports one or more Express routers.
   * `README.md` – purpose, auth model, example curl calls.
   * `validation/` – shared zod/Joi schemas (optional).
   * `tests/` – supertest specs (optional for now).

3. Root `internal/index.js` and `external/index.js` shrink to simple aggregators:
   ```js
   const router = require('express').Router();
   router.use('/auth', require('./auth').router);
   // ...
   module.exports = router;
   ```

4. Update all `require()` paths to reflect the new folder structure (standard relative paths—no external aliasing library).  
5. No functional changes to route handlers.

## Consequences
Positive:
* Faster onboarding; domain docs live beside code.
* Smaller files → easier reviews & unit tests.
* Clearer DI; services don’t depend on file layout.

Trade-offs:
* ≈ 26 developer-hours moving files & fixing imports.
* Large git diff; open PR will need review.
* Open feature branches must rebase.

## Alternatives Considered
* Keep flat structure but add READMEs – still messy.
* Generate OpenAPI spec first – valuable but orthogonal.
* Split APIs into separate NPM packages – overkill today.

## Migration Plan (Execution Checklist)

**Commit #1 – Scaffolding**
1. Create empty domain folders with placeholder `index.js` and `README.md` (auth, users, wallets, economy, generations, loras, spells, storage, teams, system) under both internal and external.
2. No external libraries added; we will keep using standard relative paths for now.
3. Run existing tests & start the app to confirm no regressions.

**Commit #2 – Pilot Domain Move**
1. Pick a small domain (e.g., `storage`).
2. `git mv src/api/internal/storageApi.js src/api/internal/storage/` (rename to `router.js` or keep original).
3. Update exports inside the moved file if renamed.
4. Update all import paths that referenced `./storageApi` to the new relative path (`./storage`). Mirror external router import if present.
5. Update aggregator in `src/api/internal/index.js` (and external equivalent).
6. Run tests + manual smoke of `/internal/.../storage` and `/api/v1/.../storage` routes.

**Commit #3 … N – Remaining Domains**
Repeat the pilot steps for each domain (`auth`, `users`, `wallets`, `economy`, `generations`, `loras`, `spells`, `teams`, `system`). Verify after each.

**Finalization**
1. Delete any now-empty legacy `*.Api.js` files and stray imports.
2. Search‐and‐replace any stale relative paths that still point to old filenames.
3. Full linter run and integration test pass.
4. Manual QA of high-traffic external endpoints.
5. Write handoff document and attach demo links per Agent Collaboration Protocol.

## Decisions on Former Open Questions

* **Route structure** – External v1 routes will remain at `/api/v1/<legacy>` for this refactor. We have not launched publicly, so keeping the current path avoids unnecessary churn while preserving flexibility for a future `/v2` redesign.
* **Validation strategy (Zod)** – Zod is a lightweight runtime schema-validation library for JavaScript/TypeScript that lets us declare object schemas and automatically validate/parse incoming data. We will adopt it incrementally, starting with new or heavily-modified domains during the re-org rather than gating the entire migration on full coverage.
