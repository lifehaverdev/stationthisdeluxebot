/**
 * Web Platform Entry Point
 * 
 * Initializes the web platform adapter and configures Express routes
 */

const express = require('express');
const path = require('path');
const { initializeRoutes } = require('./routes');
const { setupMiddleware } = require('./middleware');

/**
 * Initialize the web platform
 * @param {Object} services - Core services
 * @param {Object} options - Configuration options
 * @returns {Object} - Web platform instance
 */
function initializeWebPlatform(services, options = {}) {
  const app = express();
  
  // Set up middleware
  setupMiddleware(app);
  
  // Initialize API routes
  initializeRoutes(app, services);
  
  // Serve static files
  if (options.staticPath) {
    app.use(express.static(options.staticPath));
  }
  
  // Handle SPA routing - return index.html for all unmatched routes
  app.get('*', (req, res) => {
    if (req.accepts('html')) {
      res.sendFile(path.join(options.staticPath || __dirname, 'public', 'index.html'));
    } else {
      res.status(404).json({ error: 'Not found' });
    }
  });
  
  return {
    app,
    start: (port = 3000) => {
      return new Promise((resolve) => {
        const server = app.listen(port, () => {
          console.log(`Web platform running on port ${port}`);
          resolve(server);
        });
      });
    }
  };
}

module.exports = {
  initializeWebPlatform
}; 