const { MongoClient } = require('mongodb');
const fs = require('fs');
const dotenv = require('dotenv');
dotenv.config();

async function fixLoraTriggers() {
    const uri = process.env.MONGO_PASS;
    const client = new MongoClient(uri);

    try {
        await client.connect();
        const db = client.db('stationthisbot');
        
        // Read the issues file generated by compareLoraData
        const issues = JSON.parse(fs.readFileSync('lora-trigger-issues.json', 'utf8'));
        
        console.log(`Found ${issues.length} LoRAs to fix`);
        
        let updateCount = 0;
        for (const issue of issues) {
            // Skip if no old triggers to restore
            if (!issue.oldTriggers || issue.oldTriggers.length === 0) {
                console.log(`Skipping ${issue.lora_name}: No old triggers found`);
                continue;
            }

            // Update the document
            const result = await db.collection('loras').updateOne(
                { lora_name: issue.lora_name },
                { 
                    $set: { 
                        triggerWords: issue.oldTriggers,
                        lastUpdated: new Date()
                    }
                }
            );

            if (result.modifiedCount > 0) {
                updateCount++;
                console.log(`Updated ${issue.lora_name}`);
                console.log(`  Set triggers to: ${issue.oldTriggers.join(', ')}`);
            } else {
                console.log(`Failed to update ${issue.lora_name}`);
            }
        }

        console.log(`\nUpdate complete. Fixed ${updateCount} out of ${issues.length} LoRAs`);

    } catch (error) {
        console.error('Error fixing triggers:', error);
    } finally {
        await client.close();
    }
}

// Run the fix
fixLoraTriggers().catch(console.error);